#!/bin/bash

# Set strict error handling
set -e

# Initialize variables
PID_FILE="./.service_pids"
force=false
verbose=false

# Logging function
log() {
    local level="$1"
    shift
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[${level}] [${timestamp}] $*"
}

# Shorthand logging functions
info() { log "INFO" "$@"; }
warn() { log "WARN" "$@"; }
error() { log "ERROR" "$@"; }
debug() {
    if [[ "$verbose" == true ]]; then
        log "DEBUG" "$@"
    fi
}

# Function to print help message
print_help() {
    cat << EOF
Usage: $(basename "$0") [options]

Options:
    -f, --force       Force kill processes (SIGKILL)
    -v, --verbose     Enable verbose logging
    -h, --help        Show this help message

This script kills processes that were started by the start_stories script.
EOF
}

# Function to kill services
kill_services() {
    if [ ! -f "$PID_FILE" ]; then
        warn "No PID file found. No services to kill."
        return 0
    fi

    local signal="TERM"
    if [[ "$force" == true ]]; then
        signal="KILL"
        warn "Force killing all services"
    fi

    local temp_file
    temp_file=$(mktemp)
    local all_killed=true

    while IFS=: read -r service pid; do
        if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null; then
            info "Stopping $service (PID: $pid)..."
            if kill "-${signal}" "$pid" 2>/dev/null; then
                info "Sent ${signal} to $service (PID: $pid)"
                
                # Wait for process to terminate if not force killing
                if [[ "$force" != true ]]; then
                    local wait_count=0
                    while kill -0 "$pid" 2>/dev/null && [ "$wait_count" -lt 10 ]; do
                        debug "Waiting for $service (PID: $pid) to terminate..."
                        sleep 0.5
                        ((wait_count++))
                    done

                    # Force kill if process hasn't terminated
                    if kill -0 "$pid" 2>/dev/null; then
                        warn "$service (PID: $pid) didn't terminate gracefully, force killing..."
                        kill -KILL "$pid"
                    fi
                fi
                
                # Verify process is actually dead
                if kill -0 "$pid" 2>/dev/null; then
                    warn "Failed to kill $service (PID: $pid)"
                    echo "$service:$pid" >> "$temp_file"
                    all_killed=false
                fi
            else
                warn "Failed to kill $service (PID: $pid)"
                echo "$service:$pid" >> "$temp_file"
                all_killed=false
            fi
        else
            debug "Process $service (PID: $pid) is not running"
        fi
    done < "$PID_FILE"

    # Only remove PID file if all processes were killed
    if [ "$all_killed" = true ]; then
        rm -f "$PID_FILE"
    else
        mv "$temp_file" "$PID_FILE"
    fi
    rm -f "$temp_file"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--force)
            force=true
            shift
            ;;
        -v|--verbose)
            verbose=true
            shift
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            print_help
            exit 1
            ;;
    esac
done

# Main execution
kill_services

info "Kill script completed"
